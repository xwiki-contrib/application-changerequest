<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.5" reference="ChangeRequest.Code.ChangeRequestMacros" locale="">
  <web>ChangeRequest.Code</web>
  <name>ChangeRequestMacros</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>Main.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title>ChangeRequestMacros</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity output="false"}}
#template('diff_macros.vm')
## FIXME: This needs to be removed once we bump parent to next version
## Was added to workaround https://jira.xwiki.org/browse/XWIKI-19508
#macro (wrappedDisplayUser $user $options)
  #if ($stringtool.isEmpty($user))
    #set ($realUser = "XWiki.XWikiGuest")
  #else
    #set ($realUser = $user)
  #end
  #displayUser($realUser $options)
#end
## Hack inspired by Michael Hamann and Marius Florea from https://github.com/xwiki/xwiki-platform/pull/1733#discussion_r774453667
#macro (stripHTMLMacro $displayOutput)
  $stringtool.removeEnd($stringtool.removeStart($displayOutput, '{{html clean="false" wiki="false"}}'), '{{/html}}')
#end
#macro (displayReplyToHeader $replyReference)
  #set ($originalMessage = $services.discussions.getMessage($replyReference))
  #if ($originalMessage)
    #set ($originalMessageReference = $escapetool.xml($services.discussions.serialize($replyReference)))
    &lt;div class="reply-to-header"&gt;
        $services.localization.render('changerequest.sheet.message.reply.header', ["#wrappedDisplayUser($originalMessage.actorReference.reference, {'useInlineHTML': true})", "$escapetool.xml($services.date.displayTimeAgo($originalMessage.updateDate))"])
      &lt;a class="reply-to-navigation" href="#$originalMessageReference" data-message-reference="$originalMessageReference" title="$services.localization.render('changerequest.sheet.message.reply.link.title')"&gt;
        $services.icon.renderHTML('up')
      &lt;/a&gt;
    &lt;/div&gt;
  #end
#end
#macro (displayMessage $message $changeRequest)
#set ($discard = $xwiki.jsx.use('ChangeRequest.Code.ChangeRequestMacros'))
#set ($messageReference = $escapetool.xml($services.discussions.serialize($message.reference)))
&lt;div class="message" data-reference="$messageReference" data-xwiki-lightbox="false"&gt;
  &lt;div class="message-metadata"&gt;
    &lt;span class="message-author"&gt;#wrappedDisplayUser($message.actorReference.reference, {'useInlineHTML': true})&lt;/span&gt;
    &lt;span class="message-creationDate" title="$escapetool.xml($message.updateDate)" data-timestamp="$escapetool.xml($message.updateDate.getTime())"&gt;$escapetool.xml($services.date.displayTimeAgo($message.updateDate))&lt;/span&gt;
    &lt;span class="message-badges"&gt;
      &lt;span class="outdated-message hidden"&gt;
        &lt;span class="badge btn-danger" title="$escapetool.xml($services.localization.render('changerequest.sheet.message.outdated.title'))"&gt;
          $services.icon.renderHTML('clock') $services.localization.render('changerequest.sheet.message.outdated')
        &lt;/span&gt;
      &lt;/span&gt;
      #if ($services.changerequest.authorization.isAuthorizedToComment($changeRequest))
      &lt;span class="reply"&gt;
        &lt;button class="btn btn-xs btn-primary reply-button" type="button" title="$escapetool.xml($services.localization.render('changerequest.sheet.message.reply.button.title'))"&gt;
          $services.icon.renderHTML('comments') $services.localization.render('changerequest.sheet.message.reply.button')
        &lt;/button&gt;
      &lt;/span&gt;
      #end
      &lt;span class="collapse-buttons"&gt;
        &lt;button class="btn btn-xs btn-default collapse-button" title="$escapetool.xml($services.localization.render('changerequest.sheet.message.collapse.button.title'))"&gt;
          $services.icon.renderHTML('caret-up')
        &lt;/button&gt;
        &lt;button class="btn btn-xs btn-default expand-button hidden" title="$escapetool.xml($services.localization.render('changerequest.sheet.message.expand.button.title'))"&gt;
          $services.icon.renderHTML('caret-down')
        &lt;/button&gt;
      &lt;/span&gt;
    &lt;/span&gt;
  &lt;/div&gt;
  #if ($message.replyTo)
    #displayReplyToHeader($message.replyTo)
  #end
  &lt;div class="message-content collapse in" data-xwiki-lightbox="true"&gt;
    #stripHTMLMacro($services.discussions.renderMessageContent($messageReference))
  &lt;/div&gt;
&lt;/div&gt;
#end
#macro (getDiscussionDataAttributes $discussion $dataAttributes)
  #set ($reference = $services.changerequest.discussion.getReference($discussion))
  #set ($supplementaryData = '')
  #if ($reference.type == 'LINE_DIFF')
    #set ($lineDiffLocation = $reference.lineDiffLocation)
    #set ($fileDiffLocation = $lineDiffLocation.fileDiffLocation)
    
    #define ($supplementaryData)
      data-targetReference="$escapetool.xml($fileDiffLocation.targetReference)" data-diffId="$escapetool.xml($fileDiffLocation.diffId)" data-documentPart="$escapetool.xml($lineDiffLocation.documentPart)" data-entityReference="$escapetool.xml($lineDiffLocation.entityReference)" data-diffBlockId="$escapetool.xml($lineDiffLocation.diffBlockId)" data-lineChange="$escapetool.xml($lineDiffLocation.lineChange)" data-lineNumber="$escapetool.xml($lineDiffLocation.lineNumber)"
    #end
  #end
  #define ($dataAttributes)
    data-type="$escapetool.xml($reference.type)" data-reference="$escapetool.xml($reference.reference)" $supplementaryData
  #end
#end
## Macro inspired for unifiedDiff macro in diff_macros.vm
#macro (displayDiffBlockMetadata $crDiscussionDiffBlock)
  #set ($block = $crDiscussionDiffBlock.diffBlock)
  #set ($reference = $crDiscussionDiffBlock.reference)
  #set ($diffLocation = $reference.lineDiffLocation)
  #set ($discard = $xwiki.ssfx.use('uicomponents/viewers/diff.css', true))
  #set ($discard = $xwiki.jsfx.use('uicomponents/viewers/diff.js'))
&lt;div class="diff-block-metadata"&gt;
  &lt;div class="diff-container"&gt;
    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr class="diff-reference"&gt;
          &lt;th colspan="3"&gt;
          &lt;span class="diff-reference-title" title="$escapetool.xml($diffLocation.entityReference)"&gt;
            $services.changerequest.discussion.getPageTitle($crDiscussionDiffBlock)
          &lt;/span&gt;
          &lt;span class="diff-reference-details-switch" title="$escapetool.xml($services.localization.render('changerequest.sheet.diff.detailsButton'))"&gt;$services.icon.renderHTML('eye')&lt;/span&gt;
          &lt;div class="diff-reference-details hidden"&gt;
            &lt;div class="diff-reference-detail-location"&gt;
            #set ($translationKey = "changerequest.sheet.diff.details.location.$stringtool.toRootLowerCase($diffLocation.documentPart)")
            #set ($translationArgument = [])
            #if ($diffLocation.documentPart != 'METADATA')
              #set ($blockReference = $services.changerequest.discussion.getDiffBlockReference($crDiscussionDiffBlock))
              #set ($translationArgument = [$blockReference.name])
            #end
            $services.localization.render($translationKey, $translationArgument)
            &lt;/div&gt;
            &lt;div class="diff-reference-detail-property"&gt;
              $services.localization.render('changerequest.sheet.diff.details.propertyName', $diffLocation.diffBlockId)
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
     &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td class="diff-line-number"&gt;...&lt;/td&gt;
        &lt;td class="diff-line-number"&gt;...&lt;/td&gt;
        #set ($previousMeta = "-$mathtool.add($block.previousStart, 1),$block.previousSize")
        #set ($nextMeta = "+$mathtool.add($block.nextStart, 1),$block.nextSize")
        &lt;td class="diff-line diff-line-meta"&gt;@@ $previousMeta $nextMeta @@&lt;/td&gt;
      &lt;/tr&gt;
      #foreach ($line in $block)
        &lt;tr&gt;
          #set ($lineNumber = $line.index + 1)
          &lt;td class="diff-line-number"&gt;#if (!$line.added)$lineNumber#end&lt;/td&gt;
          &lt;td class="diff-line-number"&gt;#if (!$line.deleted)$lineNumber#end&lt;/td&gt;
          &lt;td class="diff-line diff-line-$line.type.toString().toLowerCase()"&gt;#unifiedDiffLine($line)&lt;/td&gt;
        &lt;/tr&gt;
      #end
     &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/div&gt;
&lt;/div&gt;
#end
#macro (displayEventStatus $status)
  #set ($lowerCaseStatus = $stringtool.lowerCase($status))
  #set ($translation = $services.localization.render("ChangeRequest.Code.ChangeRequestClass_status_$lowerCaseStatus"))
  $stringtool.lowerCase($translation)
#end

#template("displayer_page.vm")
## Macro inspired from displayPageReference
## Set $rawTitle to True to not display html for the title.
#macro(displayFileChangeTitle $fileChange $rawTitle)
  #if ("$!fileChange.modifiedDocument" != '')
    #set ($pageDoc = $fileChange.modifiedDocument.newDocument($xcontext.context))
    #set ($title = $escapetool.xml($pageDoc.plainTitle))
    #if ($rawTitle)
      $title
    #else
      &lt;a href="$pageDoc.URL"&gt;$title&lt;/a&gt;
    #end
  #else
    #if ($rawTitle)
      $fileChange.targetEntity
    #else
      #displayPageReference($fileChange.targetEntity)
    #end
  #end
#end

#macro (displayEvent $event $changeRequest)
  #set ($escapedUserName = "$escapetool.xml($xwiki.getPlainUserName($event.user))")
  #set ($userArgument = "&lt;a class=""user-name"" href=""$escapetool.xml($xwiki.getURL($event.user))""&gt;$escapedUserName&lt;/a&gt;")
  #set ($localizationKey = "changerequest.timeline.$event.type")
  #set ($localizationArguments = [])
  #set ($discussionClass = $NULL)
  #set ($dataReviewId = $NULL)
  #set ($icon = $NULL)
  #set ($title = $NULL)
  #set ($iconClass = "")
  #set ($skip = false)
  #set ($reviewDiscussion = $NULL)
  ## we skip the document modified events, since they are basically redundant with the filechanges ones.
  #if ($event.type == 'changerequest.document.modified')
    #set ($skip = true)
  #elseif ($event.type == 'changerequest.create')
    #set ($actualDoc = $xwiki.getDocument($event.document))
    #set ($fileChangeId = $event.parameters.get('changerequest.filechange.id'))
    #if ("$!fileChangeId" != '')
      #set ($title = $services.changerequest.getPageTitle($changeRequest.id, $fileChangeId))
    #end
    #if ("$!title" == '')
      #set ($title = $actualDoc.displayTitle)
    #end
    #set ($localizationArguments = [$userArgument, $xwiki.getURL($event.document), $escapetool.xml($title)])
    #set ($icon = 'space')
  #elseif ($event.type == 'changerequest.filechange.added')
    #set ($fileChangeId = $event.parameters.get('changerequest.filechange.id'))
    #set ($fileChangeOpt = $services.changerequest.getFileChange($changeRequest, $fileChangeId))
    #set ($icon = 'add')
    #if ($fileChangeOpt.isPresent())
      #set ($eventDoc = $fileChangeOpt.get().targetEntity)
      #set ($actualDoc = $xwiki.getDocument($eventDoc))
      #set ($title = $services.changerequest.getPageTitle($changeRequest.id, $fileChangeId))
      #if ("$!title" == '')
        #set ($title = $actualDoc.displayTitle)
      #end
      #set ($localizationArguments = [$userArgument, $xwiki.getURL($eventDoc), $escapetool.xml($title)])
    #else
      #set ($skip = true)
    #end
  #elseif ($event.type == 'changerequest.status.modified')
    #set ($oldStatus = $event.parameters.get('changerequest.status.old'))
    #set ($newStatus = $event.parameters.get('changerequest.status.new'))
    #set ($localizationArguments = [$userArgument, "#displayEventStatus($oldStatus)", "#displayEventStatus($newStatus)"])
    #if ($newStatus == 'DRAFT')
      #set ($icon = 'pause')
    #elseif ($newStatus == 'READY_FOR_REVIEW')
      #set ($icon = 'play')
    #elseif ($newStatus == 'MERGED')
      #set ($icon = 'world')
    #elseif ($newStatus == 'CLOSED' || $newStatus == 'STALE')
      #set ($icon = 'stop')
    #elseif ($newStatus == 'READY_FOR_MERGING')
      #set ($icon = 'lightbulb')
      #set ($iconClass = 'icon-success')
    #end
  #elseif ($event.type == 'changerequest.review.added')
    #set ($reviewId = $event.parameters.get('changerequest.review.id'))
    #set ($reviewOpt = $services.changerequest.review.getReview($changeRequest, $reviewId))
    #if ($reviewOpt.isPresent())
      #set ($review = $reviewOpt.get())
      #if ($review.approved)
        #set ($localizationKey = "${localizationKey}.approval")
        #set ($icon = 'check')
        #set ($iconClass = 'icon-success')
      #else
        #set ($localizationKey = "${localizationKey}.requestchanges")
        #set ($icon = 'remove')
        #set ($iconClass = 'icon-warning')
      #end
      #set ($reviewDiscussion = $reviewId)
      #if ($review.originalApprover &amp;&amp; $review.originalApprover != $review.author)
        #set ($localizationKey = "${localizationKey}.delegate")
        #set ($localizationArguments = [$userArgument, "#wrappedDisplayUser($review.originalApprover.reference, {'useInlineHTML': true})"])
      #else
        #set ($localizationArguments = [$userArgument])
      #end
    #end
  #elseif ($event.type == 'changerequest.rebased')
    #set ($concernsAllCR = $event.parameters.get('changerequest.rebased.all'))
    #set ($isAboutConflictFixing = $event.parameters.get('changerequest.rebased.conflictRelated'))
    #set ($fileChangeId = $event.parameters.get('changerequest.rebased.filechange.id'))
    #set ($icon = 'refresh')

    #if ($concernsAllCR == 'true')
      #set ($localizationArguments = [$userArgument])
      #set ($localizationKey = "${localizationKey}.all")
    #else
      #set ($fileChangeOpt = $services.changerequest.getFileChange($changeRequest, $fileChangeId))
      #if ($fileChangeOpt.isPresent())
        #set ($eventDoc = $fileChangeOpt.get().targetEntity)
        #set ($actualDoc = $xwiki.getDocument($eventDoc))
        #set ($title = $services.changerequest.getPageTitle($changeRequest.id, $fileChangeId))
        #if ("$!title" == '')
          #set ($title = $actualDoc.displayTitle)
        #end
        #set ($localizationArguments = [$userArgument, $xwiki.getURL($eventDoc), $escapetool.xml($title)])
      #else
        #set ($skip = true)
      #end
      #if ($isAboutConflictFixing == 'true')
        #set ($localizationKey = "${localizationKey}.conflictFixing")
      #else
        #set ($localizationKey = "${localizationKey}.filechange")
      #end
    #end
  #elseif ($event.type == 'changerequest.discussions')
    #set ($dataTab = "")
    #set ($discussionType = $event.parameters.get('changerequest.discussion.type'))
    #set ($messageReference = $event.parameters.get('changerequest.message.reference'))
    #set ($localizationKey = "${localizationKey}.${discussionType}")
    #set ($messageURL = "$xwiki.getURL($doc)#$messageReference")
    #set ($icon = 'comment')
    #if ($discussionType == 'LINE_DIFF')
      #set ($dataTab = "data-tab='filechanges'")
      #set ($discussionClass = "diff")
    #elseif ($discussionType == 'REVIEW' || $discussionType == 'REVIEWS')
      #set ($dataTab = "data-tab='reviews'")
      #set ($discussionClass = "review")
      #set ($skip = true)
    #elseif ($discussionType == "CHANGE_REQUEST_COMMENT")
      #set ($discussionClass = "global-comment")
    #end
    #set ($link = "&lt;a href=""$messageURL"" data-message-reference=""$messageReference"" $dataTab&gt;")
    #set ($localizationArguments = [$userArgument, $link, '&lt;/a&gt;'])
  #elseif ($event.type == 'changerequest.updated')
    #set($icon = 'pencil')
    #set ($localizationArguments = [$userArgument])
  #else
    #set ($localizationArguments = [$userArgument])
  #end
  #if (!$skip)
  &lt;li class="event" id="event-$event.date.time" data-event-type="$escapetool.xml($event.type)"
    data-xwiki-lightbox="false"&gt;
    #getUserAvatarURL($event.user $avatarURL 80)
    &lt;span class="user-event user-avatar"&gt;&lt;img src="$escapetool.xml($avatarURL.url)" alt="$escapedUserName" /&gt;&lt;/span&gt;
    &lt;span class="event-icon $iconClass"&gt;$services.icon.renderHTML($icon)&lt;/span&gt;
    &lt;span class="content"&gt;
      $services.localization.render($localizationKey, $localizationArguments)
    &lt;/span&gt;
    &lt;span class="date" data-date="$event.date.time" title="$escapetool.xml($datetool.format($event.date))"&gt;
      &lt;a href="#event-$event.date.time"&gt;$services.date.displayTimeAgo($event.date)&lt;/a&gt;
    &lt;/span&gt;
    #if ($discussionClass)
      &lt;div class="discussion timeline-comment $discussionClass" data-message-reference="$messageReference"&gt;&lt;/div&gt;
    #elseif ($reviewDiscussion)
      &lt;div class="discussion-holder timeline-comment review" data-reviewid="$reviewDiscussion"&gt;&lt;/div&gt;
    #end
  &lt;/li&gt;
  #end
#end
#macro (displayAllEvents $changeRequestId)
  &lt;ul class="timeline"&gt;
    #set ($eventSearchResult = $services.changerequest.notifications.getChangeRequestEvents($changeRequestId, 0, 100))
    #set ($changeRequest = $services.changerequest.getChangeRequest($changeRequestId).get())
    #foreach ($event in $eventSearchResult.stream().iterator())
      #displayEvent($event $changeRequest)
    #end
  &lt;/ul&gt;
#end
#macro (displayDescription)
  ## Code inspired from AWM.Content page
  #if ("$!request.edit" == 'description' &amp;&amp; $canBeEdited)
    #set ($name = 'content')
    #set ($editedDocument = $doc)
    ## Use the preferred content editor.
    #set ($useWysiwygEditor = $xwiki.getUserPreference('editor') == 'Wysiwyg')
    #set ($saveDescriptionUrl = $services.changerequest.getChangeRequestURL('save', $changeRequestId))
    #set ($saveDescriptionUrl = "${saveDescriptionUrl}?form_token=$services.csrf.token")
    &lt;form method="post" action="$saveDescriptionUrl"&gt;
    ## The "content" id is expected by some JavaScript and CSS code.
    #set ($id = 'content')
    #if (!$useWysiwygEditor)
      &lt;div id="xwikieditcontentinner"&gt;
        ## The tool bar may have an entry to insert an HTML macro. Make sure it doesn't break the HTML macro we are currently in.
        #set ($toolBar = "#template('simpleedittoolbar.vm')")
        $!toolBar.replace('{{', '&amp;#123;&amp;#123;')
        ## Display a simple textarea.
        &lt;textarea id="$id" cols="80" rows="25" name="$name"&gt;$escapetool.xml($editedDocument.content)&lt;/textarea&gt;
      &lt;/div&gt;
    #else
      $!services.edit.syntaxContent.wysiwyg($editedDocument.content, $editedDocument.syntax, {
        'id': "$id",
        'name': "$name",
        'rows': 25,
        'cols': 80,
        'full': true
      })
    #end
    &lt;div class="description-button-wrapper"&gt;
      &lt;input type="button" id="cancel-description" class="btn btn-default" value="Cancel" /&gt;
      &lt;input type="submit" id="save-description" class="btn btn-primary" value="Save" /&gt;
    &lt;/div&gt;
    &lt;/form&gt;
  #elseif ($canBeEdited)
    &lt;a class="edit-description" role="button" title="Edit" href="$doc.getURL('view', 'edit=description')"&gt;
      $services.icon.renderHTML('pencil')
      &lt;span class="sr-only"&gt;Edit&lt;/span&gt;
    &lt;/a&gt;
    #if ("$!doc.content" == "")
      &lt;span class="description-placeholder"&gt;$services.localization.render('changerequest.sheet.description.placeholder')&lt;/span&gt;
    #else
    ## Include the content of the current document.
    ## Escape {{ in the rendered content to be sure that the HTML macro is not closed unintentionally.
      &lt;span class="description-content"&gt;$doc.getRenderedContent($doc.content, $doc.syntax.toIdString()).replace('{{', '&amp;amp;#123;&amp;amp;#123;')&lt;/span&gt;
    #end
  #else
    &lt;span class="description-content"&gt;$doc.getRenderedContent($doc.content, $doc.syntax.toIdString()).replace('{{', '&amp;amp;#123;&amp;amp;#123;')&lt;/span&gt;
  #end
#end
{{/velocity}}</content>
  <object>
    <name>ChangeRequest.Code.ChangeRequestMacros</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>860181c5-484c-428b-a743-3e6827476577</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <restricted>0</restricted>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>'use strict';
require(['jquery'], function ($) {
  var toggleCollapseExpandButton = function (isExpanded, element) {
    if (isExpanded) {
      element.find('.collapse-button').removeClass('hidden');
      element.find('.expand-button').addClass('hidden');
    } else {
      element.find('.expand-button').removeClass('hidden');
      element.find('.collapse-button').addClass('hidden');
    }
  };
  
  var handleCollapse = function (index, element) {
    $(element).on('click', function (event) {
      $(element).parents('.message').find('.message-content').collapse('hide');
    });
  };
  
  var handleExpand = function (index, element) {
    $(element).on('click', function (event) {
      $(element).parents('.message').find('.message-content').collapse('show');
    });
  };
  
  var initialize = function () {
    $(document).on('hidden.bs.collapse', '.message-content', function (event) {
      toggleCollapseExpandButton(false, $(this).parent());
    });
    $(document).on('shown.bs.collapse', '.message-content', function (event) {
      toggleCollapseExpandButton(true, $(this).parent());
    });
    $('.message').find('.collapse-button').each(handleCollapse);
    $('.message').find('.expand-button').each(handleExpand);
    var outdatedMessages = $('.outdated-message:visible').parents('.message').find('.message-content');

    if (outdatedMessages.length &gt; 0) {
      outdatedMessages.removeClass('in');
      toggleCollapseExpandButton(false, outdatedMessages.parent());
    }
  }
  
  $(document).on('xwiki:dom:updated', initialize);
  (XWiki.isInitialized &amp;&amp; initialize()) || $(document).on('xwiki:dom:loading', initialize);
});</code>
    </property>
    <property>
      <name>Discussion collapse / expand</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
</xwikidoc>
