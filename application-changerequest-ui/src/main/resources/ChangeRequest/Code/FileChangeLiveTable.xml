<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.5" reference="ChangeRequest.Code.FileChangeLiveTable" locale="">
  <web>ChangeRequest.Code</web>
  <name>FileChangeLiveTable</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>Main.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title>FileChangeLiveTable</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{include reference="ChangeRequest.Code.ChangeRequestMacros"/}}
{{velocity wiki="false"}}
#if ("$!request.get('changerequest')" == '')
Technical page for getting livetable data for change request file changes.
#else
  #set ($changeRequestOpt = $services.changerequest.getChangeRequest($request.get('changerequest')))
  #if (!$changeRequestOpt.isPresent())
    #set ($discard = $response.sendError(400, 'Change request cannot be found.'))
  #else
    #template('hierarchy_macros.vm')
    #set ($changeRequest = $changeRequestOpt.get())
    #set ($isMerged = $changeRequest.status == "MERGED")
    #set ($references = $changeRequest.modifiedDocuments)
    #set ($crEditName = "changerequest")
    #if("$!{request.xpage}" == 'plain')
      $response.setContentType('application/json')
    #end
    #set ($rowNumber = $references.size())
    #set ($rows = [])
    #foreach ($docReference in $references)
      #set ($concernedDoc = $xwiki.getDocument($docReference))
      #set ($hasConflicts = false)
      #set ($mergedDocumentResultOpt = $services.changerequest.merge.getMergeDocumentResult($changeRequest, $docReference))
      #if ($mergedDocumentResultOpt.isPresent())
        #set ($hasConflicts = $mergedDocumentResultOpt.get().hasConflicts())
      #end
      #set ($viewUrl = $concernedDoc.getURL('view'))
      #set ($editUrl = $concernedDoc.getURL('editcr', "changerequest=$changeRequest.id"))
      #set ($isExtensionPage = $services.extension.xar.isExtensionDocument($docReference))
      #set ($canEditFile = $services.security.authorization.isRightRegistered($crEditName) &amp;&amp; $services.security.authorization.hasAccess($crEditName, $docReference))
      #set ($canEditCR = $services.changerequest.authorization.isAuthorizedToEdit($changeRequest))
      #set ($hasCREdit = $canEditFile &amp;&amp; $canEditCR)
      #set ($lastFileChangeOpt = $changeRequest.getLatestFileChangeFor($docReference))
      #if ($lastFileChangeOpt.isPresent())
        #set ($lastFileChange = $lastFileChangeOpt.get())
        #set ($authorDocRef = $lastFileChange.author.reference)
        #set ($row = {
          'isExtensionPage': $isExtensionPage,
          'filechange_author': "&lt;a href='$xwiki.getURL($authorDocRef)'&gt;$xwiki.getPlainUserName($authorDocRef)&lt;/a&gt;",
          'filechange_type': $services.localization.render("changerequest.filechange.type.$lastFileChange.type"),
          'filechange_version': $lastFileChange.version,
          'filechange_documentVersion': $lastFileChange.previousPublishedVersion,
          'doc_viewable': $services.security.authorization.hasAccess('view', $docReference),
          'doc_fullName': $services.model.serialize($docReference, 'local'),
          'doc_space': $services.model.serialize($docReference.parent, 'local'),
          'doc_location': "#hierarchy($docReference, {'limit': 5, 'plain': false, 'local': true, 'displayTitle': false})",
          'doc_title': "#displayFileChangeTitle($lastFileChange)",
          'doc_isNew': "$concernedDoc.isNew()",
          'doc_url': $xwiki.getURL($docReference),
          'doc_space_url': $xwiki.getURL($docReference.parent),
          'doc_wiki': $docReference.wikiReference.name,
          'doc_wiki_url': $xwiki.getURL($docReference.wikiReference),
          'filechange_locale': $docReference.locale
        })
        #if (($lastFileChange.type == 'EDITION' || $lastFileChange.type == 'CREATION') &amp;&amp; $hasCREdit)
          #set ($discard = $row.put('doc_hasedit', true))
          #set ($discard = $row.put('doc_edit_url', $xwiki.getURL($docReference, 'editcr', "changerequest=$changeRequest.id")))
        #else
          #set ($discard = $row.put('doc_hasedit', false))
        #end
        #if ($hasConflicts &amp;&amp; $canEditCR)
          #set ($discard = $row.put('doc_hasfixconflict', true))
          #set ($conflictUrl = "&amp;reference=$services.model.serialize($docReference, 'local')&amp;locale=$docReference.locale")
          #set ($discard = $row.put('doc_fixconflict_url', $conflictUrl))
          #set ($discard = $row.put('doc_hasrebase', false))
        #elseif ($services.changerequest.isFileChangeOutdated($lastFileChange) &amp;&amp; $hasCREdit)
          #set ($changeRequestDoc = $services.changerequest.getChangeRequestDocumentReference($changeRequest))
          #set ($changeRequestUrl = $services.changerequest.getChangeRequestURL('rebase', $changeRequest.id))
          #set ($rebaseUrlParameters = "referenceParameter=$services.model.serialize($docReference, 'local')&amp;locale=$docReference.locale"))
          #set ($rebaseUrl = "${changeRequestUrl}?${rebaseUrlParameters}")
          #set ($discard = $row.put('doc_rebase_url', $rebaseUrl))
          #set ($discard = $row.put('doc_hasrebase', true))
          #set ($discard = $row.put('doc_hasfixconflict', false))
        #else
          #set ($discard = $row.put('doc_hasfixconflict', false))
          #set ($discard = $row.put('doc_hasrebase', false))
        #end
        #if ($hasCREdit &amp;&amp; $services.changerequest.minimumApprovers &gt; 0)
          #set ($discard = $row.put('doc_editapprovers_url', $xwiki.getURL($docReference, 'editcr', "changerequest=$changeRequest.id&amp;editor=object")))
          #set ($discard = $row.put('doc_haseditapprovers', true))
        #end
        #set ($discard = $rows.add($row))
      #end
    #end
    #jsonResponse({
      'totalrows': $rowNumber,
      'returnedrows': $rowNumber,
      'offset': 1,
      'reqNo': 1,
      'rows': $rows
    })
  #end
#end
{{/velocity}}</content>
</xwikidoc>
